
static const char conicap_man_date[] = "$Date: 2003/02/05 12:23:58 $" ;
static const char conicap_man[] =

"\n"
"\n"
"***** CONICA pipeline use\n"
"\n"
"\n"
"\n"
"This command implements most of the CONICA pipeline recipes.\n"
"All supported recipes share a similar  user-interface for\n"
"parameters and command-line arguments, these conventions\n"
"are described below.\n"
"\n"
"To get more help, you can try:\n"
"\n"
"% conicap             -- list of all supported recipes.\n"
"% conicap man         -- this help.\n"
"% conicap recipe      -- short command-line help.\n"
"% conicap man recipe  -- man page for the recipe.\n"
"\n"
"OPTIONS\n"
"\n"
"All recipes present in this program share the following\n"
"conventions for command-line options:\n"
"\n"
"\n"
" * The first argument on the command-line must be\n"
"   'conicap' of course. The second argument must be\n"
"   the recipe name.\n"
"\n"
" * All recipes require at least one argument, which\n"
"   is the input name of the file or files to process.\n"
"   Some recipes accept several input files, some\n"
"   recipes accept only one file. Some recipes are\n"
"   expecting FITS frames, some are expecting ASCII\n"
"   lists. Check out the recipe manual to see what\n"
"   kind of input is expected.\n"
"\n"
" * Without any other option, all recipes will start\n"
"   processing the input file(s) using default parameters.\n"
"   You can change the behaviour of a recipe by specifying\n"
"   different values. These options are local to each\n"
"   recipe, check out the recipe manual to see what the\n"
"   different options are.\n"
"\n"
" * Recipe-specific options can be placed anywhere on\n"
"   the command-line. The following are equivalent:\n"
"\n"
"   % conicap recipe input -a alpha -b beta -flag\n"
"   % conicap recipe -a alpha input -b beta -flag\n"
"   % conicap recipe -flag -a alpha -b beta input\n"
"   etc.\n"
"\n"
" * All recipes handle short and long options. Short\n"
"   options consist of one dash (-) and one character\n"
"   (a letter or a digit). All short options have\n"
"   a long option equivalent. Long options consist\n"
"   of a double dash (--) and a string. Both forms\n"
"   are equivalent. The short option is easier to\n"
"   type, the long option is usually preferred in\n"
"   scripts to enhance readability of the command\n"
"   call.\n"
"\n"
" * You can always provide an output file name to a\n"
"   recipe by using the -o/--output option. You are\n"
"   expected to provide a base name which will be used\n"
"   by the recipe to name its output files. An output\n"
"   file name looks like:\n"
"\n"
"   base_type.ext\n"
"\n"
"   where:\n"
"\n"
"   base is the base name you provide with -o/--output.\n"
"   type is a suffix indicating the file type.\n"
"   ext  is the file extension (fits, tfits, paf, ...).\n"
"\n"
"   For example, using the 'detlin' recipe with the\n"
"   option -o file as:\n"
"\n"
"   % conicap detlin input -o  file\n"
"\n"
"   will produce files called 'file_a.fits'.\n"
"   Notice that you can provide a base name containing\n"
"   a path, like: /data/reduced/calib/file, in which\n"
"   case the output name would be:\n"
"   /data/reduced/calib/file_a.fits\n"
"   But you must then make sure that the path you give\n"
"   is suitable for writing.\n"
"\n"
"   If you provide a base name containing an extension,\n"
"   the recipe will silently truncate the extension and\n"
"   use the result as a base name, so it is equivalent\n"
"   to provide:\n"
"\n"
"   -o file\n"
"   -o file.fits\n"
"\n"
" * If you do not use the -o/--output option, the recipe\n"
"   will make an output name for you, by using the input\n"
"   file name. The rule is to truncate any path in the\n"
"   input file name and any extension. So if your input\n"
"   file is called /data/raw/input_list.ascii, the recipe\n"
"   will use 'input_list' as an output base name. This\n"
"   means that all recipe products are then produced in\n"
"   the current working directory. The following calls\n"
"   will all produce files with the same name in the\n"
"   same directory (.):\n"
"\n"
"   conicap recipe input\n"
"   conicap recipe input.fits\n"
"   conicap recipe /data/input\n"
"   conicap recipe /data/raw/input.fits\n"
"\n"
"Enjoy!\n"
"-- \n"
"The CONICA pipeline team\n";
