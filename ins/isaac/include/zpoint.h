
const char isaac_zpoint_version[] = "$Revision: 1.8 $" ;
const char isaac_zpoint_date[]="$Date: 2003/02/18 12:53:29 $" ;
int  isaac_zpoint_main(void * dict) ;

cmdline_spec isaac_zpoint_cmd[] = {
    {'c', "calib", "Calibration ASCII file", 1, "calib_file"},
    {'C', "check", "Activate check image output", 0, NULL},
    {'d', "dit", "force DIT value", 1, "value"},
    {'f', "filter", "Force filter name", 1, "filtname"},
    {'l', "locate", "Search size in pixels", 1, "'sx sy'"},
    {'m', "mag", "Reference star magnitude", 1, "value"},
    {'o', "output", "Specify an output file base name", 1, "filename"},
    {'O', "offset", "Offset file name", 1, "filename"},
    {'r', "radius", "Photometry radiuses", 1, "'star bgin bgout'"},
    {'s', "star", "Reference star position (RA DEC)", 1, "'ra dec'"},
    {'t', "type", "Chopped frame type", 1, "chop | nochop"},

    {0, 0, 0, 0, 0}
};

const char isaac_zpoint_man[] =
"NAME\n"
"zpoint - ISAAC night zero points\n"
"\n"
"SYNOPSIS\n"
"isaacp zpoint [options] input [-o/--output filename]\n"
"\n"
"DESCRIPTION\n"
"       Photometry zero-point acquisitions are done by observing a\n"
"       standard star with wide offsets on the detector. The oper­\n"
"       ator  at the instrument is in charge of locating the stan­\n"
"       dard  star  through  finding  charts  and  positioning  it\n"
"       roughly  at  the  center  of  the array for the very first\n"
"       frame.  Subsequent frame offsets are indicated in the FITS\n"
"       header  in  the  usual  ISAAC way (see ISAAC documentation\n"
"       about FITS header information).\n"
"\n"
"       zpoint locates first the standard  star  in  the  first\n"
"       frame. The only mandatory requirement is that the standard\n"
"       star should be seen in all input frames.  Another  assump­\n"
"       tion  used by the locator is that the star is roughly cen­\n"
"       tered on the first frame. If it is not, the object closest\n"
"       to  the  center  will  be  used,  if it can be seen on all\n"
"       frames. If no such object can be found, the command aborts\n"
"       with an error message.\n"
"\n"
"       Once the star is located in all planes, the photometry can\n"
"       be computed. In short-wavelength mode, the sky needs first\n"
"       to  be  subtracted.  This is done by subtracting frames by\n"
"       pairs: every frame is sky-subtracted by making the differ­\n"
"       ence with the previous frame and the next frame. The first\n"
"       and the last frame in the batch have only one neighbouring\n"
"       frame,  so  they  bring  only  one measurement. All others\n"
"       bring two measurements. The  total  number  of  photometry\n"
"       measurements in short-wavelength mode is thus 2N-2.\n"
"\n"
"       In  long-wavelength  mode, all frames are already sky-sub­\n"
"       tracted by the chopping/nodding  sequence.  There  are  as\n"
"       many measurements as there are input frames.\n"
"\n"
"       Flat-field will be applied prior to frame subtraction or\n"
"       photometry measurement if a flat-field is provided.\n"
"\n"
"       Photometry  is  then  computed using 3 radius definitions,\n"
"       defining the circle assumed to contain the star,  and  the\n"
"       crown  assumed  to contain only background around the star\n"
"       for background subtraction. The observed background should\n"
"       usually  be around zero if the sky-subtraction worked cor­\n"
"       rectly.\n"
"\n"
"       The standard star  is  then  identified  in  the  internal\n"
"       eclipse database from its position. The first input header\n"
"       is read to retrieve RA and DEC and  the  closest  standard\n"
"       star  to  this  position is assumed the one observed.  The\n"
"       observation filter is then retrieved from the header,  and\n"
"       an  association  is applied to link the observation filter\n"
"       and the magnitude in the database.  The  current  database\n"
"       contains  star magnitudes only in bands J, H, K, Ks, L and\n"
"       M. If no  such  association  can  be  found,  the  command\n"
"       aborts.\n"
"\n"
"       If you have used a filter that is unknown to this command,\n"
"       you can force the association by using the -f/--filter\n"
"       option. The string you give will specify the band to be\n"
"       used to retrieve the standard star information.\n"
"\n"
"       The  zero-point  is then computed for each photometry mea­\n"
"       surement.  In the short-wavelength mode, the  final  value\n"
"       is  the  average of all zero-point measurements, minus the\n"
"       highest and the lowest. In the long-wavelength  mode,  all\n"
"       measurements are taken into account. An average zero-point\n"
"       and RMS are produced.\n"
"\n"
"       Notice that this method will not apply to  standard  stars\n"
"       in  crowded  fields, since it is relying on the assumption\n"
"       that the standard star to look for is the brightest object\n"
"       in the center of the first frame, a condition which is not\n"
"       fulfilled in that case.\n"
"\n"
"       Several values are fetched from the input file FITS  head­\n"
"       ers.  This  means  that  input files must conform with the\n"
"       ISAAC convention for FITS keywords.  If this  is  not  the\n"
"       case,  the  command  will  abort as soon as it cannot find\n"
"       some information. You will  be  required  to  provide  the\n"
"       missing value(s) directly from the command-line.\n"
"\n"
"OPTIONS\n"
"       -C or --check\n"
"              This option will generate a check image in the cur­\n"
"              rent directory. A check image is an image  composed\n"
"              of  little  vignettes extracted from the input data\n"
"              set. Each vignette is 61x61 pixels in size,  always\n"
"              centered  on  the  star. If the input batch name is\n"
"              'input', the name of this  image  is  has  actually\n"
"              succeeded  in locating the star in all frames. This\n"
"              is also useful to check when large  variations  are\n"
"              observed  in the photometry measurements, to see if\n"
"              Circles are drawn in the  first  vignette  to  show\n"
"              the circles for aperture photometry computation are\n"
"              situated.\n"
"\n"
"       -d or --dit value\n"
"              Declares the value of the DIT (detector integration\n"
"              time) in seconds, in case it cannot be found in the\n"
"              FITS headers.\n"
"\n"
"       -f or --filter filtname\n"
"              This option  forces  the  filter  association  in a\n"
"              given filter. Possible names  are the filters known\n"
"              to the database, i.e. one of:\n"
"              J\n"
"              H\n"
"              K\n"
"              Ks\n"
"              L\n"
"              M\n"
"              Providing this option will  force  the  command  to\n"
"              discard any header information and act  as  if  the\n"
"              acquisition   had  been  made  with  the  specified\n"
"              filter.  Using this option with the wrong filter is\n"
"              likely  to  give creative results. Use with care...\n"
"\n"
"       -c or --calib filename\n"
"              This option specifies the name of  the  ASCII  file\n"
"              that contain the list of the  possible  calibration\n"
"              files. The second column contains  identifiers  for\n"
"              these calibration files. The  possible  calibration\n"
"              files are the flatfield and  the three coefficients\n"
"              images used for the non-linearity  correction.  The\n"
"              identifiers  are  respectivelly  TWFLAT,  DETLIN_A,\n"
"              DETLIN_B and DETLIN_C. The detector linearity files\n"
"              are produced by the detlin recipe, and the flat  by\n"
"              the twflat recipe.\n"
"\n"
"       -l or --locate 'sx sy'\n"
"              Specifies  the  size  of the search window for fine\n"
"              positioning. This pass of fine positioning is  only\n"
"              applied  to  correct for header offset errors, i.e.\n"
"              the values  indicated  for  sx  and  sy  should  be\n"
"              slightly bigger than the expected offset errors. sx\n"
"              and sy are half-sizes: they are  defaulted  to  50,\n"
"              which  means  that  input offsets are allowed to be\n"
"              false up to +/-50 pixels.\n"
"\n"
"       -m or --mag value\n"
"              If the star was correctly  identified  but  has  no\n"
"              magnitude information for the requested filter, you\n"
"              can provide a magnitude  value  by  hand  directly.\n"
"              This will bypass a star search in the database. All\n"
"              characteristics of the star in the output file will\n"
"              be set to 'unknown', but for its magnitude.\n"
"\n"
"       -o or --output 'filename'\n"
"              This option  changes the  output  file  base  name.\n"
"              Default is  'stdstar', which produces a file called\n"
"              'stdstar_zpoint.paf'.\n"
"\n"
"       -O or --offset filename\n"
"              This  option  allows  the  user to provide an ASCII\n"
"              file in input for offsets, instead of  having  them\n"
"              read  from the FITS headers. This is useful if your\n"
"              files do not conform with the ISAAC convention,  or\n"
"              if  the header offsets are false or absent from the\n"
"              headers. An offset file is an ASCII file containing\n"
"              two  columns:  the first column is the offset in X,\n"
"              the second column is the offset in Y.  Offsets  are\n"
"              supposed to be given relatively to the first frame.\n"
"              The first offset should thus be (0,0). If  this  is\n"
"              not  the  case, the first offset will be subtracted\n"
"              from all offsets in the file to yield relative off­\n"
"              sets  to  the first frame. This allows e.g. to pin­\n"
"              point the same object in all frames  and  give  the\n"
"              list  of  positions. By subtracting the position in\n"
"              the first frames,  all  positions  are  transformed\n"
"              into relative offsets.\n"
"\n"
"       -r or --radius 'r1 r2 r3'\n"
"              This option specifies the radii to use for photome­\n"
"              try computation. The object is assumed to  be  con­\n"
"              tained  into a disk of radius r1. The background is\n"
"              computed as the median pixel of the  crown  defined\n"
"              by  r2,  r3, centered on the object. Default values\n"
"              for these are r1=30, r2=40, r3=60.\n"
"\n"
"       -s or --star 'ra dec'\n"
"              This option specifies RA and DEC  of  the  standard\n"
"              star  to use if these values cannot be found in the\n"
"              header. Providing  values  with  this  option  will\n"
"              override any value found in the header.\n"
"\n"
"       -t or --type chop|nochop\n"
"              This option forces the recipe to process frames  in\n"
"              chopped (-t chop) or non-chopped (-t nochop)  mode.\n"
"              If this option is not used, the recipe will  try to\n"
"              find out by itself whether the  input  are  chopped\n"
"              frames or not.\n"
"\n"
"FILES\n"
"       The  input  file  must  be  an  ASCII  list or a FITS cube\n"
"       (NAXIS=3). An ASCII list contains on one column the  names\n"
"       of  the  input  FITS  frames  (assumed  to be images, i.e.\n"
"       NAXIS=2). If a FITS cube is provided,  offset  information\n"
"       need to be provided through the -o option.\n"
"\n"
"       The  output file is a PAF file, conformant to VLT specifi­\n"
"       cations. It contains all informations about  the  measure­\n"
"       ments.\n"
"\n"
"\n";

