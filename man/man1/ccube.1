.TH ccube 1 "21 May 1997"
.SH NAME
ccube \- cube/image computer 
.SH SYNOPSIS
.B ccube
[options] <arithmetic_expression> [outcube]	
.SH DESCRIPTION
.PP
.B ccube 
is a calculator which allows operation between cubes, between cubes
and constants, and also between constants (for the same price, you won
a wonderful on-line calculator).
.SH EXPRESSIONS
.PP
Arithmetic expressions support both standard and polish reverse notation
operations. Be careful however, that to avoid all ambiguities, FITS
files given in an expression are only identified by the fact that they
contain a "fits" or "FITS" extension (suffix), or if they are prefixed
with an arobas (@). All other symbols will be interpreted as numerical
operators or operands. This is mainly due to avoid conflicts between
operands/operators and Unix file names. Examples: the slash (/) is both
a division sign and the root directory, "1/2" may be the result of the
division of 1 by 2, or a file named '2' located in a directory
named '1', and so on.
.PP
See the following paragraphs for a detailed description of supported
expressions and operators.
.SH POLISH REVERSE NOTATION (PRN)
.PP
Int this mode (default) all arithmetic expressions use the Polish Reverse
Notation (PRN).
.PP
An arithmetic expression must be provided enclosed in quotes.
.PP
Separate arguments by spaces. "2 1+" is invalid, "2 1 +" is Ok.
.PP
Cube arguments are names which contain "fits" or "FITS", or
any character string which begins with an arobas '@'. The arobas
is stripped and the rest of the string is taken as an input file
name. e.g. to compute with a file named 'b012', give as
argument '@b012' in the arithmetic expression.
.PP
Possible arithmetic operations are: addition (+), subtraction (-),
multiplication (*), division (/), exponentiation (^), logarithm (l).
.PP
Operands are processed from left to right. e.g. to divide an image by
2, the order is "image.fits 2 /".
.PP
Two cubes may be added/subtracted/multiplied/divided if and only if:
.br
1. They have the same number of planes:
.br
The operation is repeated plane by plane: plane n of first cube operates
with plane n of second cube.
.br
2. The second cube has only one plane:
.br
The operation is repeated on all planes of first cube, with the only 
plane in second cube.
.PP
All operators are binary. To use the minus '-' as unary operator,
subtract from zero (see examples below).
.PP
A logarithm (l) is also considered as a binary operator. Its first
argument is the object which logarithm will be taken, the second 
argument (cannot be omitted) is the logarithm base (cannot be a cube!).
.SH STANDARD ARITHMETIC EXPRESSIONS
.PP
.B Use the
\-s or \--standard
.B option to input standard arithmetic expressions.
.PP
The possible operators are as above: addition '+', subtraction '-',
multiplication '*', division '/', exponentiation '^', logarithm 'l'.
To these, add the possibility to use parentheses '(' and ')' to
enforce operator priority. The operator priority is given below,
in decreasing order of priority:
.PP
.B exponentiation
.br
.B logarithm
.br
.B multiplication and division
(same priority level)
.br
.B addition and subtration
(same prioriry level)
.PP
Blanks are stripped off before processing an arithmetic expression,
so feel free to make notations clear by adding some.
.PP
As in PRN above, file names are identified as character strings
containing 'fits' or 'FITS', or any character string containing
an arobas '@'. The arobas is stripped and the rest of the string is
taken as an input file name e.g. to compute with a file named 'b012',
give as argument '@b012' in the arithmetic expression.
.SH EXAMPLES
.PP
All the following examples are given first in PRN and then in 
standard notation.
.PP
To compute: out.fits = in.fits * 2
.br
>
.B ccube
"in.fits 2 *" out.fits
.br
>
.B ccube
\-s "in.fits * 2" out.fits
.PP
To compute: out.fits = (obj.fits - sky.fits) / ff.fits
.br
>
.B ccube
"obj.fits sky.fits - ff.fits /" out.fits
.br
>
.B ccube
\-s "(obj.fits - sky.fits)/ff.fits" out.fits
.PP
To compute: out.fits = (obj1 + obj2)/2
.br
>
.B ccube
"@obj1 @obj2 + 2 /" out.fits
.br
>
.B ccube
\-s "(@obj1 + @obj2) / 2" out.fits
.br
>
.B ccube
\-s "(@obj1+@obj2)/2" out.fits
.PP
To compute the log in base 10 of an image named 'image.fits', type:
.br
>
.B ccube
"image.fits 10 l" out.fits
.br
>
.B ccube
\-s "image.fits l 10" out.fits
.PP
To compute the square of an image: out.fits = in.fits ^ 2
.br 
>
.B ccube
"in.fits 2 ^" out.fits
.br
>
.B ccube
\-s "in.fits^2" out.fits
.PP
To exponentiate an image, e.g. out.fits = 1.01 ^ input_im
.br 
>
.B ccube
"1.01 @input_im ^" out.fits
.br
>
.B ccube
\-s "1.01 ^ @input_im" out.fits
.PP
Here is an example showing that PRN does not use parentheses:
.PP
>
.B ccube
\-s "(2*3) + 2*(4*(1+2))"
.br
is equivalent to:
.br
>
.B ccube
"2 3 * 2 1 + 4 * 2 * +"
.PP
With images:
.br
"(obj.fits - sky.fits) / (ff.fits - dark.fits)"
.br
Becomes:
.br
"obj.fits sky.fits - ff.fits dark.fits - /"
.PP
Invalid syntax with PRN may be due to lack of separators:
.br
"1 3+" and "1 2 3 +*" are invalid.
.br
"1 3 +" and "1 2 3 + *" are Ok.
.PP
In standard notation, it is Ok to stack operators, as long as there
is no ambiguity ("1 2" differs from "12" !):
.br
"1+3" and "1*(2+3)" are ok.
.PP
With PRN,
.I invalid syntax
may be returned if some objects are still on the stack
when no operator remains. The following:
.br
"@im1 @im2 2 *" will cause an error message, because an object
(im1) is still on the stack after all operators have been used.
.PP
To use the minus '-' as unary operator to negate an image
subtract it from zero:
.br
out = - in
.br
is given as:
.br
>
.B ccube
"0 @in -" out
.br
>
.B ccube
\-s "0-@in" out
.SH OPTIONS
.TP
.B \--polish or \-p
Polish reverse notation for arithmetic expressions. This is the default.
.TP
.B \--standard or \-s
Standard notation for arithmetic expressions.
.SH FILES
.PP
Input files shall all comply with FITS format.
.br
Default output file name is 'comp.fits'.
.SH BUGS
.PP
Unary operators are not supported, they should.
