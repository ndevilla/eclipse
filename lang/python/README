eclipse/python interface
------------------------

What is Python?
---------------

	Python is an interpreted, interactive, object-oriented programming 
	language. It is often compared to Tcl, Perl, Scheme or Java. 

	Python combines remarkable power with very clear syntax. It has modules, 
	classes, exceptions, very high level dynamic data types, and dynamic 
	typing. There are interfaces to many system calls and libraries, as well 
	as to various windowing systems (X11, Motif, Tk, Mac, MFC). New built-in 
	modules are easily written in C or C++. Python is also usable as an 
	extension language for applications that need a programmable interface. 

	The Python implementation is portable: it runs on many brands of UNIX, on 
	Windows, DOS, OS/2, Mac, Amiga... If your favorite system isn't listed 
	here, it may still be supported, if there's a C compiler for it. Ask 
	around on comp.lang.python -- or just try compiling Python yourself. 

	Python is copyrighted but freely usable and distributable, even for 
	commercial use. 

What is eclipse-python?
-----------------------

	The eclipse-python module is a C module implementing the bindings between 
	Python and eclipse. This module has not been programmed but generated by 
	SWIG (see http://www.swig.org).
	SWIG is a piece of software that allows to bind C libraries and high-level 
	languages like Python, Perl, Tcl or others. For example, if you have a C 
	library offering the following function:

	int compute_square(int x)

	You can make a binding to it in the language of your choice and use it as 
	if it were a native function in the high-level language. In Python, this 
	probably means something like:

	import mymodule
	a = mymodule.compute_square(42)

	What eclipse-python achieves is the binding of most (not all) eclipse 
	library functions to calls available from Python.  This enables the use of 
	Python as a high-level language for the development of data reduction 
	recipes or data analysis routines, and still benefit from the speed of 
	optimized C present in eclipse.

	In addition to this C module, a Python layer encapsulates the eclipse C 
	calls into a number of classes, which gives a truly object-oriented 
	flavour to the package. This extra layer allows to program high-level 
	code (recipes) in Python, making use of a number of classes, without 
	having to care about the calls to the C library. This protects the 
	high-level code from changes in the low-level eclipse library.

How to install it
-----------------

	To install eclipse-python, you need to have Python installed on your 
	machine. Best is to use the latest Python version (2.0 at the date of 
	writing), which you can download from: http://www.python.org

	If the python executable can be found in your path, you can just type 
	'make' and the module should compile. Once the module is compiled, it 
	should be installed. You have two options.

	1) If you have the privilege to write to the directory site-packages of 
		python library directory, you can type:

           >make install 

    2) If you don't have this privilege, then you should copy the files from 
		the appropriate buil/lib* directory to somewhere on your PYTHONPATH

	Note that we use distutils for building the extension, So you could build 
	and install with:

	>python setup.py build
	>python setup.py install

	(This is what 'make' and 'make install' do)

How to use it
-------------

	Having installed the Python module, you now have eclipse C functions 
	available from a module called c_eclipse, which you probably do not want 
	to import directly. You should make use of the Python interface located in 
	a module called eclipse.py instead. Here is an example:

	import eclipse

	im = eclipse.cube("image.fits")
	bias = eclipse.cube("bias.fits")
	flat = eclipse.cube("flat.fits")
	im = (im-bias)/flat
	print im.stat()
        ...

	There is little documentation for this module yet. You might want to have 
	a look at eclipse_test.py in the lang/Python/lib/ subdirectory of your 
	eclipse distribution for some example usage.
